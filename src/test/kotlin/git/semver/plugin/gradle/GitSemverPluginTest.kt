/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package git.semver.plugin.gradle

import org.assertj.core.api.Assertions.assertThat
import org.gradle.testfixtures.ProjectBuilder
import kotlin.test.Test
import kotlin.test.assertNotNull

/**
 * A simple unit test for the 'git.semver.plugin.gradle.greeting' plugin.
 */
class GitSemverPluginTest {
    @Test fun `plugin registers task`() {
        // Create a test project and apply the plugin
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("com.github.jmongard.git-semver-plugin")

        // Verify the result
        assertThat(project.tasks.findByName("printVersion")).isNotNull();
    }

    @Test fun format_log_empty() {

        val project = ProjectBuilder.builder().build()

        val actual = GitSemverPlugin.formatLog(GitSemverPluginExtension(project), listOf())

        assertThat(actual).startsWith("# What's Changed")
    }

    @Test fun format_log_with_breaking_changes() {

        val project = ProjectBuilder.builder().build()
        val settings = GitSemverPluginExtension(project)
        val changeLog = listOf(
            "fix(#5)!: A breaking change",
            "fix(#1): Bugfix 1",
            "fix(deps): Bugfix broken deps",
            "fix(#1): Bugfix 1",
            "feat(#2): A feature",
            "build(deps): a build change",
            "release: 1.2.3-alpha",
            "ci: a ci change"
        )

        val actual = GitSemverPlugin.formatLog(settings, changeLog)

        println(actual)
        assertThat(actual)
            .startsWith("# What's Changed")
            .contains("## Bug Fixes")
            .contains("Bugfix 1")
            .contains("## Breaking Changes")
            .contains("A breaking change")
            .contains("## New Features")
            .doesNotContain("1.2.3")
    }
}
